


#define DXL_BUS_SERIAL1 1  //Dynamixel on Serial1(USART1)  <-OpenCM9.04

/* Dynamixel ID defines */

#define GOAL_POSITION 30

#define RHipY 24
#define RHipR 22
#define RHipP 23
#define RKnee 21
#define RFootP 13
#define RFootR 7

#define LHipY 4    
#define LHipR 5    
#define LHipP 2
#define LKnee 6
#define LFootP 9    
#define LFootR 1    


/* Control table defines */
int arr1[16][12] = {{-3.22-10,-45.12,-49.8,-79.1,39.26,-3.22-10,-0.6+10,52,49.51,74.71,-39.55,-0.59+10},
                        {-3.22-10,-45.12,-49.8,-79.1,39.26,-3.22-10,-0.59+10,52,49.51,79.1,-39.55,-0.59+10},
                        {-4.98-10,-45.12,-48.93,-77.64,38.38,-4.98-10,-2.34+10,52,48.93,77.93,-38.96,-2.34+10},
                        {-6.45-10,-45.12,-48.05,-75.88,37.5,-6.45-10,-3.81+10,52,48.34,76.46,-38.38,-3.81+10},
                        {-7.62-10,-45.12,-47.17,-73.83,36.62,-7.62-10,-4.98+10,52,47.46,74.71,-37.5,-4.98+10},
                        {-9.67-10,-45.12,-49.22,-78.22,38.67,-8.79-10,-2.93+10,52,46.58,72.95,-36.62,-5.86+10},
                        {-12.89-10,-45.12,-54.2,-87.89,43.65,-9.67-10,2.34+10,52,46,71.78,-36.04,-6.45+10},
                        {-14.36-10,-45.12,-56.25,-92.29,45.7,-10.25-10,4.98+10,52,45.7,71.19,-35.74,-6.74+10},
                        {-12.89-10,-45.12,-62.7,-86.72,36.62,-9.67-10,2.34+10,52,46.29,71.48,-38.09,-6.45+10},
                        {-12.89-10,-45.12,-62.7,-86.72,36.62,-9.67-10,2.34+10,52,46.29,71.48,-38.09,-6.45+10},
                        {-9.67-10,-45.12,-60.64,-74.41,26.37,-8.79-10,-2.93+10,52,52,72.36,-40.14,-5.86+10},
                        {-7.62-10,-45.12,-59.18,-68.26,21.68,-7.62-10,-4.98+10,52,45.7,73.83,-41.31,-4.98+10},
                        {-6.45-10,-45.12,-60.64,-70.31,22.56,-6.45-10,-3.81+10,52,46.58,75.88,-42.19,-3.81+10},
                        {-4.98-10,-45.12,-61.23,-72.95,24.61,-4.98-10,-2.34+10,52,46.29,77.05,-43.65,-2.34+10},
                        {-3.22-10,-45.12,-60.94,-75.59,27.25,-3.22-10,-0.59+10,52,52,77.64,-45.41,-0.59+10},
                        {-1.46-10,-45.12,-60.06,-77.34,29.88,-1.46-10,1.17+10,52,43.07,77.05,-46.88,1.17+10}};

int arr2[32][12] = {{0.29-10,-45.12,-61.52,-77.93,31.93,0.29-10,2.93+10,52,43.36,75.29,-48.05,2.93+10},
                    {0.29-10,-45.12,-61.52,-77.93,31.93,0.29-10,2.93+10,52,43.36,75.29,-48.05,2.93+10},
                    {1.76-10,-45.12,-59.77,-77.34,33.11,1.76-10,4.39+10,52,40.72,72.95,-48.05,4.39+10},
                    {2.05-10,-45.12,-58.01,-76.17,33.98,3.22-10,6.15+10,52,40.43,72.95,-48.63,5.86+10},
                    {0.29-10,-45.12,-55.96,-74.71,34.28,4.39-10,8.5+10,52,43.95,77.93,-50.1,7.32+10},
                    {-2.34-10,-45.12,-54.2,-73.24,34.57,5.27-10,11.13+10,52,49.8,84.67,-50.98,8.5+10},
                    {-4.69-10,-45.12,-52.73,-72.07,34.86,5.86-10,12.89+10,52,56.25,90.23,-49.8,9.08+10},
                    {-5.57-10,-45.12,-51.86,-71.78,35.45,6.15-10,13.48+10,52,62.11,92.29,-46.29,9.38+10},
                    {-4.69-10,-45.12,-51.27,-72.07,36.33,5.86-10,12.89+10,52,65.62,90.23,-40.43,9.08+10},
                    {-4.69-10,-45.12,-51.27,-72.07,36.33,5.86-10,12.89+10,52,65.62,90.23,-40.43,9.08+10},
                    {-2.34-10,-45.12,-50.98,-73.24,37.79,5.27-10,11.13+10,52,66.8,84.67,-33.98,8.5+10},
                    {0.29-10,-45.12,-50.68,-74.71,39.55,4.39-10,8.5+10,52,65.92,77.93,-28.12,7.32+10},
                    {2.05-10,-45.12,-50.39,-76.17,41.6,3.22-10,6.15+10,52,64.45,72.95,-24.61,5.86+10},
                    {1.76-10,-45.12,-49.51,-77.34,43.36,1.76-10,4.39+10,52,63.87,72.95,-24.9,4.39+10},
                    {0.29-10,-45.12,-48.34,-77.93,52,0.29-10,2.93+10,52,63.87,75.29,-27.54,2.93+10},
                    {-1.46-10,-45.12,-46.29,-77.34,46.58,-1.46-10,1.17+10,52,62.7,77.05,-30.18,1.17+10},
                    {-3.22-10,-45.12,-43.65,-75.59,47.75,-3.22-10,-0.59+10,52,61.23,77.64,-33.23,-0.59+10},
                    {-3.22-10,-45.12,-43.65,-75.59,47.75,-3.22-10,-0.59+10,52,61.23,77.64,-33.23,-0.59+10},
                    {-4.69-10,-45.12,-41.02,-73.24,47.75,-4.69-10,-2.05+10,52,59.47,77.05,-33.4,-2.05+10},
                    {-6.45-10,-45.12,-40.72,-73.24,48.34,-6.15-10,-2.34+10,52,57.71,75.88,-34.28,-3.52+10},
                    {-8.79-10,-45.12,-44.24,-78.22,49.8,-7.62-10,-0.59+10,52,55.66,74.41,-34.57,-4.69+10},
                    {-11.43-10,-45.12,-50.1,-84.96,50.68,-8.79-10,2.05+10,52,53.91,72.95,-34.86,-5.57+10},
                    {-13.18-10,-45.12,-56.54,-90.53,49.51,-9.38-10,4.39+10,52,52.44,71.78,-35.16,-6.15+10},
                    {-13.77-10,-45.12,-62.4,-92.58,46,-9.67-10,5.24+10,52,51.56,71.48,-35.74,-6.45+10},
                    {-13.18-10,-45.12,-65.92,-90.53,40.14,-9.38-10,4.39+10,52,50.98,71.78,-36.62,-6.15+10},
                    {-13.18-10,-45.12,-65.92,-90.53,40.14,-9.38-10,4.39+10,52,50.98,71.78,-36.62,-6.15+10},
                    {-11.43-10,-45.12,-67.09,-84.96,33.69,-8.79-10,2.05+10,52,50.68,72.95,-38.09,-5.57+10},
                    {-8.79-10,-45.12,-66.21,-78.22,27.83,-7.62-10,-0.59+10,52,50.39,74.41,-39.84,-4.69+10},
                    {-6.45-10,-45.12,-64.75,-73.24,24.32,-6.15-10,-2.34+10,52,50.1,75.88,-41.89,-3.52+10},
                    {-4.69-10,-45.12,-64.16,-73.24,24.61,-4.69-10,-2.05+10,52,49.22,77.05,-43.65,-2.05+10},
                    {-3.22-10,-45.12,-64.16,-75.59,27.25,-3.22-10,-0.59+10,52,48.05,77.64,-45.41,-0.59+10},
                    {-1.46-10,-45.12,-62.99,-77.34,29.88,-1.46-10,1.17+10,52,46,77.05,-46.88,1.17+10}};



int tf(int angle)
{
  return map(angle,-180,180,0,1024);
}
 

 
 
Dynamixel Dxl(DXL_BUS_SERIAL1);

void setup()
{
     // Dynamixel 2.0 Baudrate -> 0: 9600, 1: 57600, 2: 115200, 3: 1Mbps
     Dxl.begin(3);
     Dxl.jointMode(RHipY); //jointMode() is to use position mode
     Dxl.jointMode(RHipR);
     Dxl.jointMode(RHipP);
     Dxl.jointMode(RKnee);
     Dxl.jointMode(RFootP);
     Dxl.jointMode(RFootR);
     Dxl.jointMode(LHipY); //jointMode() is to use position mode
     Dxl.jointMode(LHipR);
     Dxl.jointMode(LHipP);
     Dxl.jointMode(LKnee);
     Dxl.jointMode(LFootP);
     Dxl.jointMode(LFootR);
    delay(1000);//wait for servo to move

   
    Dxl.writeWord(RHipR,GOAL_POSITION,tf(-3.22));//min 364 max 512
    Dxl.writeWord(RHipY,GOAL_POSITION,tf(-45.12)); //set the position of servo # 1 to '0'
    Dxl.writeWord(RHipP,GOAL_POSITION,tf(-49.8));//440 min limit 677 max limit
    Dxl.writeWord(RKnee,GOAL_POSITION,tf(-79.1));// --only max limit 512 max limit 440 min limit
    Dxl.writeWord(RFootP,GOAL_POSITION,tf(39.26)); //410 min limit 680 max limit
    Dxl.writeWord(RFootR,GOAL_POSITION,tf(-3.22));

    Dxl.writeWord(LHipR,GOAL_POSITION,tf(-0.6));//max 660 min 512
    Dxl.writeWord(LHipY,GOAL_POSITION,tf(48)); //set the position of servo # 1 to '0'
    Dxl.writeWord(LHipP,GOAL_POSITION,tf(49.51));//440 min limit 677 max limit
    Dxl.writeWord(LKnee,GOAL_POSITION,tf(74.71));// --only - back 410 min limit 512 max limit
    Dxl.writeWord(LFootP,GOAL_POSITION,tf(-39.55));//440 min limit 680 max limit
    Dxl.writeWord(LFootR,GOAL_POSITION,tf(-0.59));

    delay(1000);//wait for servo to move
 
   for(int i=0;i<16;i++)
   {
      Dxl.writeWord(RHipR,GOAL_POSITION,tf(arr1[i][0]));
      Dxl.writeWord(RHipY,GOAL_POSITION,tf(arr1[i][1]));
      Dxl.writeWord(RHipP,GOAL_POSITION,tf(arr1[i][2]));
      Dxl.writeWord(RKnee,GOAL_POSITION,tf(arr1[i][3]));
      Dxl.writeWord(RFootP,GOAL_POSITION,tf(arr1[i][4]));
      Dxl.writeWord(RFootR,GOAL_POSITION,tf(arr1[i][5]));
      Dxl.writeWord(LHipR,GOAL_POSITION,tf(arr1[i][6]));
      Dxl.writeWord(LHipY,GOAL_POSITION,tf(arr1[i][7]));
      Dxl.writeWord(LHipP,GOAL_POSITION,tf(arr1[i][8]));
      Dxl.writeWord(LKnee,GOAL_POSITION,tf(arr1[i][9]));
      Dxl.writeWord(LFootP,GOAL_POSITION,tf(arr1[i][10]));
      Dxl.writeWord(LFootR,GOAL_POSITION,tf(arr1[i][11]));                  
      delay(78);          
  }
}              

void loop()
{
   for(int i=0;i<32;i++)
   {
      Dxl.writeWord(RHipR,GOAL_POSITION,tf(arr2[i][0]));
      Dxl.writeWord(RHipY,GOAL_POSITION,tf(arr2[i][1]));
      Dxl.writeWord(RHipP,GOAL_POSITION,tf(arr2[i][2]));
      Dxl.writeWord(RKnee,GOAL_POSITION,tf(arr2[i][3]));
      Dxl.writeWord(RFootP,GOAL_POSITION,tf(arr2[i][4]));
      Dxl.writeWord(RFootR,GOAL_POSITION,tf(arr2[i][5]));
      Dxl.writeWord(LHipR,GOAL_POSITION,tf(arr2[i][6]));
      Dxl.writeWord(LHipY,GOAL_POSITION,tf(arr2[i][7]));
      Dxl.writeWord(LHipP,GOAL_POSITION,tf(arr2[i][8]));
      Dxl.writeWord(LKnee,GOAL_POSITION,tf(arr2[i][9]));
      Dxl.writeWord(LFootP,GOAL_POSITION,tf(arr2[i][10]));
      Dxl.writeWord(LFootR,GOAL_POSITION,tf(arr2[i][11]));                  
      delay(78);            
  }          
 
}